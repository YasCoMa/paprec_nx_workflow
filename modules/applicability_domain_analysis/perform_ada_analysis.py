import os
import joblib
import numpy as np
import pandas as pd
from tqdm import tqdm

from sklearn.model_selection import train_test_split
from sklearn.ensemble import ExtraTreesClassifier
from sklearn.metrics import accuracy_score, f1_score, precision_score, recall_score, roc_auc_score, matthews_corrcoef, auc, precision_recall_curve

from adapac2 import ApplicabilityDomainDetector

class ADAnalysis:
    """
    To illustrate the applicability domain analysis, we selected the the best ranked models, according to their performance in the training step, for each sequence type. Both models  were based on the features generated by the ESM2 embeddings and had Extra tree as best classifier, but their datasets were the Gram- protein and Mixed gram stains for epitope. The test datasets for this analysis were the IEDB validated data for P. aeruginosa and S. aureus, the eptiopes and their proteins.

    """

    def __init__(self, dataDir ):
        self.root = dataDir
        
        self.sim_metrics = ['cityblock', 'euclidean', 'rogerstanimoto', 'correlation', 'cosine']
        self.metrics = ['accuracy_score', 'f1_score', 'precision_score', 'recall_score', 'roc_auc_score','matthews_corrcoef']
        
        self.resultsFolder = os.path.join( self.root, 'results_ada')
        if( not os.path.isdir(self.resultsFolder) ):
            os.mkdir(self.resultsFolder)
    
    def _load_data_v2(self, base, test, method, perc):
        train_dsfolder = os.path.join( self.root, base, method )
        model = None
        subfolder = None
        for f in os.listdir( train_dsfolder ):
            if( f.endswith('-global_best') ):
                infile = os.path.join( train_dsfolder, f )
                model = joblib.load(infile)
                subfolder = f.replace( '-global_best', '' )
        
        path = os.path.join( train_dsfolder, subfolder, 'computed_dataset.tsv' )
        df_train = pd.read_csv( path, sep='\t' )
        x_train = df_train.iloc[:, 3:].values
        y_train = df_train.iloc[:, 2].values
        if( base == test ):
            perc = 30
            bxi_train, bxi_test, by_train, by_test = train_test_split( x_train, y_train, test_size = (perc/100), random_state=42)
            
            xi_train = bxi_train
            y_train = by_train
            xi_test = bxi_test
            y_test = by_test
        else:
            test_dsfolder = os.path.join( self.root, test, method )
            path = os.path.join( test_dsfolder, subfolder, 'computed_dataset.tsv' )
            df_test = pd.read_csv( path, sep='\t' )
            x_test = df_test.iloc[:, 3:].values
            y_test = df_test.iloc[:, 2].values

            txi_train, txi_test, ty_train, ty_test = train_test_split( x_test, y_test, test_size = (perc/100), random_state=42)
            
            xi_train = x_train
            xi_test = txi_test
            y_test = ty_test
        
        #clf = ExtraTreesClassifier( random_state=0 )
        #clf.fit(xi_train, y_train)
        
        return xi_train, xi_test, y_test, model
        
    def _analysis_ada_v2(self, fout, xi_train, xi_test, y, model, base, test, method, sim_metrics = None):
        thrs = np.arange(0.4, 1, 0.1)
        
        covfile = os.path.join( fout, 'result_coverage.tsv' )
        f = open( covfile, "w")
        header = [ 'train', 'test', 'method', 'similarity_metric', 'threshold', 'total_inlier', 'inlier_pos', 'inlier_neg', 'total_test', 'total_pos', 'total_neg', 'general_coverage', 'positive_coverage', 'negative_coverage' ]
        header = '\t'.join(header)
        f.write( f"{header}\n" )
        f.close()
        
        outfile = os.path.join( fout, 'result_applicability.tsv' )
        f = open( outfile, "w")
        header = [ 'train', 'test', 'method', 'similarity_metric', 'threshold', 'qty_inliers' ] + self.metrics
        header = '\t'.join(header)
        f.write( f"{header}\n" )
        f.close()
        
        for sim in tqdm( sim_metrics ):
            for t in thrs:
                a = ApplicabilityDomainDetector( k=5, alpha=t, metric = sim )
                a.fit( xi_train )
                X_test_inlier, yinlier = a.transform( xi_test, y )
                
                size_test = len(xi_test)
                npos = len( list( filter( lambda x: x==1, y )) )
                nneg = len( list( filter( lambda x: x==0, y )) )
                cov = len(X_test_inlier) / size_test
                
                poscov = 0 
                negcov = 0
                sizei = len(yinlier)
                if(sizei > 0):
                    ipos = len( list( filter( lambda x: x==1, yinlier )) )
                    ineg = len( list( filter( lambda x: x==0, yinlier )) )
                    poscov = ipos / npos
                    negcov = ineg / nneg
                
                    preds = model.predict( X_test_inlier )
                    result = []
                    for mt in self.metrics:
                        try:
                            value = eval( f"{mt}(yinlier, preds)" )
                        except:
                            value = 0
                        result.append( str(value) )
                    
                    result = [ base, test, method, sim, str(t), str( len(X_test_inlier) ) ] + result
                    values = '\t'.join(result)
                    with open( outfile, "a" ) as f:
                        f.write( f"{values}\n" )

                    result = [ base, test, method, sim, str(t), str( len(X_test_inlier) ), str(ipos), str(ineg), str(size_test), str(npos), str(nneg), str(cov), str(poscov), str(negcov) ]
                    values = '\t'.join(result)
                    with open( covfile, "a") as g:
                        g.write( f"{values}\n" )
        
    def run_ada(self, method, base, test, proportion, sim_metrics):
        ide = f"{base},{test}"

        fout = os.path.join( self.resultsFolder, ide )
        if( not os.path.isdir(fout) ):
            os.mkdir( fout )
            
            xi_train, xi_test, y_test, model = self._load_data_v2( base, test, method, proportion )
            self._analysis_ada_v2( fout, xi_train, xi_test, y_test, model, base, test, method, sim_metrics )

if __name__ == '__main__':
    folderOut = "./out"
    dataDir = "./data"
    a = AdaAnalysis(dataDir, folderOut)
    a.run_ada()
